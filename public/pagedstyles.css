@media print {
  @page title {
    margin: 0;
  }

  @page {
    size: A4 landscape;

    @bottom-center {
      content: counter(page);
      font-size: small;
    }

    @top-left-corner {
      content: element(headerRunning);
    }

    @top-right {
      content: element(addressRunning);
      font-size: x-small;
    }

    @bottom-right {
      content: element(footerRunning);
      width: 3cm;
    }
  }
}

.title-page {
  page: title;
}

.pagedjs_margin .pagedjs_margin-top-left-corner .pagedjs_margin-content {
  width: 920px;
}

.headerAddress {
  position: running(addressRunning);
}

[data-running-role='header'],
[data-running-role='footer'],
[data-running-role='address'],
.header-container,
.footer-container {
  margin: 0;
  padding: 0;
}

[data-running-role='header'] {
  position: running(headerRunning);
}

[data-running-role='footer'] {
  position: running(footerRunning);
}

[data-running-role='address'] {
  position: running(addressRunning);
}

.header-table {
  width: 100%;
  border-collapse: collapse;
}

.header-table,
.header-table tbody,
.header-table tr,
.header-table td {
  margin: 0;
  border: 0;
  padding: 0;
}

.header-table__media {
  width: 45%;
  vertical-align: top;
}

.header-table__details {
  text-align: right;
  vertical-align: top;
}

.headerPrimary,
.headerAddress {
  margin: 0;
  padding: 0;
}

.headerPrimary img {
  max-width: 100%;
  height: auto;
  display: block;
}

.footerPrimary {
  display: flex;
  justify-content: flex-end;
}

/* Override the default line-height and min-height which we put in tiptap to emulate new lines */
.headerAddress p {
  line-height: normal;
  min-height: auto;
}

/* footer */
.pagedjs_margin .pagedjs_margin-bottom-right .pagedjs_margin-content {
  display: flex;
  justify-content: flex-end;
  padding-right: 2mm;
}

.footerImage {
  position: running(footerRunning);
}

.headerImage {
  position: running(headerRunning);
}

[data-type='table-of-contents'] li p {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin: 0;
  padding: 0;
  text-wrap: nowrap;
}

/* Adjust orders for remaining elements */
[data-type='table-of-contents'] li p::before {
  order: 2;
  content: '. . . . . . . . . . . . . . . . . . . . ' '. . . . . . . . . . . . . . . . . . . . '
    '. . . . . . . . . . . . . . . . . . . . ' '. . . . . . . . . . . . . . . . . . . . '
    '. . . . . . . . . . . . . . . . . . . . ';
  overflow: hidden;
  text-wrap: nowrap;
}

/*
In the CSS, the target-counter property is used within ::before and ::after pseudo-elements, 
using the content property. It can be translated as: find the counter named page that appears 
where you find the element we're targetting with the attribute data-toc-id-selector:
*/
[data-type='table-of-contents'] li p::after {
  order: 3;
  display: flex;
  content: target-counter(attr(data-toc-id-selector), page);
  background-color: white;
  padding-left: 2mm;
}
